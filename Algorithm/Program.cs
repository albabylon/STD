using System;
using System.Threading;

namespace Algorithm
{
    internal class Program
    {
        // Алгоритм — это некоторый набор шагов, выполнение которых приводит к какому-то определённому результату.
        // Блок-схема — это графическая модель, описывающая алгоритм, в котором отдельные шаги изображены в виде блоков различной формы, соединенных между собой линиями.

        // Линейный алгоритм — это набор команд (действий), выполняемых последовательно во времени друг за другом, согласно порядку их записи
        // Циклический алгоритм — это алгоритм, предусматривающий многократное повторение одного и того же действия (или действий) над исходными данными.
        // Алгоритм с ветвлением — это алгоритм, содержащий хотя бы одно условие, в результате проверки которого обеспечивается переход на один из двух возможных шагов.

        // ХАРАКТЕРИСТИКИ АЛГОРИТМА
        // Сложность восприятия алгоритма
        // 1 Не стоит пытаться сэкономить на символах в коде и сокращать переменные до, как вам кажется, очевидных аббревиатур
        // 2 Следует уменьшать вложенность кода
        // 3 Группируйте блоки кода по смыслу
        // 4 При использовании неочевидного алгоритма оставляйте комментарии

        // Алгоритмическая сложность
        // Эффективность алгоритма — это оценка того, как много ресурсов понадобится алгоритму для выполнения.
        // [1, 2, 9, 11, 6, 15, 9, 23, 10, 12] - если нужно найти число 10, то перебирая по очереди и сравнивая с 10 (простой поиск) и это будет неэффективно
        // Временная сложность алгоритма  — сколько времени уйдет на выполнение.
        // Ёмкостная сложность алгоритма — как много памяти понадобится приложению, чтобы выполнить алгоритм.
        // Нужно искать оптимальную асимптотическую сложность, которая представляет собой время и память, которые понадобятся вашей программе в процессе работы.

        // Нотация «O» большое (О(f(n))) описывает максимальную сложность алгоритма, то есть гарантируется, что скорость роста сложности алгоритма не превысит скорость роста f(n) (математическая функция, зависящая от n —  размера входящих значений).
        // Когда говорят, что «сложность алгоритма есть O(f(n))», это означает, что с увеличением параметра n (размер входных данных), время работы алгоритма будет возрастать не быстрее, чем некоторая константа, умноженная на f(n).
        // Когда нужно взять какой-то элемент из массива по индекс это значит, что нотация «О» большое для этого алгоритма будет: O(1), то есть нам понадобится не более одного действия. (не важно сколько будет элементов)
        // Когда ищем определенное значение в массиве, то Big O-нотации всегда рассматривается худший вариант и будет равна O(n)
        // Чаще всего нет смысла в оценке скорости выполнения одной итерации. Поэтому коэффициенты переменных в O-нотации обычно сокращаются: O(100n) == O(20n) == O(n)

        static void Main(string[] args)
        {
            // Ссылка на алгоритм
            // https://www.dropbox.com/scl/fi/i4jk3dcicrsf7c8xinb1x/.drawio.png?rlkey=d244xwkex8cor1fwo7oqqk7i1&dl=0

            User[] users = new User[] 
            { 
                new User() { Name = "Sasha", IsPremium = false, Login = "s1" }, 
                new User() { Name = "Petr", IsPremium = true, Login = "p1" },
                new User() { Name = "Valentina", IsPremium = false, Login = "v1" },
                new User() { Name = "Alex", IsPremium = true, Login = "a1" } 
            };

            foreach (var user in users) 
            {
                CheckPremium(user);
                Console.WriteLine("_______________");
            }

            Console.ReadLine();
        }

        private static void CheckPremium(User user)
        {
            if (!user.IsPremium)
                ShowAds();
            Greeting(user.Name);
        }

        private static void Greeting(string name)
        {
            Console.WriteLine($"Привет, {name}");
        }

        private static void ShowAds()
        {
            Console.WriteLine("Посетите наш новый сайт с бесплатными играми free.games.for.a.fool.com");
            // Остановка на 1 с
            Thread.Sleep(1000);

            Console.WriteLine("Купите подписку на МыКомбо и слушайте музыку везде и всегда.");
            // Остановка на 2 с
            Thread.Sleep(2000);

            Console.WriteLine("Оформите премиум-подписку на наш сервис, чтобы не видеть рекламу.");
            // Остановка на 3 с
            Thread.Sleep(3000);
        }

        private class User
        {
            public string Login { get; set; }
            public string Name { get; set; }
            public bool IsPremium { get; set; }
        }
    }
}
